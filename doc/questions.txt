#  ________      ______       ________      ______
# /_______/\    /_____/\     /_______/\    /_____/\
# \__.::._\/    \:::__\/     \__.::._\/    \:::_ \ \
#    \::\ \      \:\ \  __      \::\ \      \:(_) \ \
#    _\::\ \__    \:\ \/_/\     _\::\ \__    \: ___\/
#   /__\::\__/\    \:\_\ \ \   /__\::\__/\    \ \ \
#   \________\/     \_____\/   \________\/     \_\/
# V0.1.0.DEV
# ??/04/21
# 4 jours
# WP => All Ok, Matching 100%, Accuracy 98.2% (entre 95.2% et 99.7%) en 2h52
# Key = Nom+Prenom+CP+Profession
# Mise en place des pondérations => stringcomparer
# Accuracy => Google Geocoding API 5$/1000 adresses : 4j https://developers.google.com/maps/documentation/geocoding/overview?hl=fr
# Accuracy => Google Map Scrapping : 2j mais très lent, uniquement pour les scores faibles
# Pattern Matching => Google Tensorflow USE pattern par mot : 2j mais lent https://www.tensorflow.org/hub/tutorials/semantic_similarity_with_tf_hub_universal_encoder
# Cedex => Peut donner 2 insee : 0.5j (rare et peu utile)
# Bad Insee => 21 Codes Insee inconnus dans Cedex (27549, )
# Réunions : 0.25j

# V0.0.2.DEV
# 01/04/21
# 5 jours
# WP => All OK, Matching 100%, Accuracy 94% (entre 86% et 97%) accuracy en 2h55
# Colonne 44 Matchcp
# Grandes villes => Pb des CEDEX
# Campagne => Pb des lieux-dits, absence d'adresse ou adresse succinte
# Début WP
# Département ruraux, pas de numéro => BD lieux dits : 1j
# Cedex => liste-des-cedex.csv Chercher dans la liste le cp pour déduire la commune puis déduire le réel cp : 1j
# Debuggage => adressefinder, splitps
# Pattern matching => Amélioration par le réglage fin des seuils (83) : 0.5j
# Si mauvais CP + Mauvaise commune => chercher d'abord la commune puis déduire le CP : 0.5j
# Si mauvaise adresse ou pas d'adresse => prendre centre du village ? : 0.1j
# Si mauvais score => chercher d'abord la commune, la rue et le numéro puis déduire le CP : 0.5j
# Si mauvais score => chercher d'abord le cp, la rue et le numéro puis déduire la commune : 0.5j
# Rajouter dans la key la colonne 11
# Key => Nom+Prenom+Adresse* - Nom+Prenom+CP = 4628 (3%) = PS avec adresses différentes ou homonymes
# Fin WP
# Volumetrie => Envisager Sql : 5j
# Cedex => Peut donner 2 insee : 0.2j
# Gestion des cas spéciaux => Fichier CSV de matching de CP, Commune, Adresse : 1j
# Exemple de cas spéciaux
# CP 38034 => 38100, 20184 => 20090, 59430 => 59140
# 59160 LOMME => 59000 LILLE géré pour certaines rue par la bd adresse
# Corse PORTO => OTA != PORTO VECCHIO, PORTICCIO => GROSSETO PRUGNA, SAGONE => VICO, non géré dans la bd adresse
# Il y a des adresses inconnues => PLACE DES COMMERCES 01480 CHALEINS, ROUTE DE PARIS 01000 BOURG EN BRESSE (existe sur maps), ...
# Low score => Google maps (durée à étudier)
# Low score => Google Tensorflow (3j)
# Mise en prod, doc : 0.25j
# Réunions : 0.25j

# V0.0.1.DEV
# 17/03/21
# 2 jours
# Nom du projet ? ICIP
# Début WP
# Volume => 2 455 000 PSrow, 2 401 000 PSrow métropolitains+corse, 155000 PSunique (15.4/PSrow), 96000 Adresse unique
# Volume comment travailler dessus ? => split par département, fonctionnement par indexation, SQL ?
# Rapidité + RAM => Gestion par département : 0.5j
# Rapidité => Travailler par adresse unique et non par row : 0.5j
# Rapidité => Indexation des adresses  (cp, commune, rue) par pickle (NoSql) réutilisable : 1j
# Rapidité => Indéxation des PS avec création d'une clé : 0.1j
# Matching CP (Cedex et BP) => Gestion du CP le plus proche en dessous (ne marche pas forcement dans les grandes villes) : 0.1j
# Matching Commune => Pattern matching (Gestalt) uniquement sur les communes du CP + score fiabilité (très fiable en ville) : 1j
# Matching Commune => Si mauvais score chercher adresse4 : 0.1j
# Matching Rue => Pattern matching uniquement sur les adresses de la commune, prendre la + proche + score fiabilité : 0.5j
# Matching Num => Si pas de num ou mauvais num chercher le + proche du même côté de la rue en priorité: 0.1j
# 2A 2B : 0.1j
# 75, 69, 13 => Gestion des arrondissements: 0.2j
# Gestion des anciens noms de communes => 1 commune peut avoir 3 valeurs: nom_commune, nom_ancienne_commune, libelle_acheminement : 0.5j
# Gestion des anciennes adresses => 1 adresse peut avoir 2 valeurs: nom_voie, nom_afnor, (lieux-dits?) : 0.1j
# Fin WP : 5j
# Cedex => liste-des-cedex.csv Chercher dans la liste le cp pour déduire la commune puis déduire le réel cp : 1j
# Si mauvais CP + Mauvaise commune => chercher d'abord la commune puis déduire le CP : 0.5j
# Département ruraux, pas de numéro => BD lieux dits : 1j
# Si mauvaise adresse ou pas d'adresse => prendre centre du village ? : 0.1j
# Si mauvais score => chercher d'abord la commune, la rue et le numéro puis déduire le CP : 0.5j
# Si mauvais score => chercher d'abord le cp, la rue et le numéro puis déduire la commune : 0.5j
# Gestion des cas spéciaux => Fichier CSV de matching de CP, Commune, Adresse : 1j
# Exemple de cas spéciaux
# CP 38034 => 38100, 20184 => 20090, 59430 => 59140
# 59160 LOMME => 59000 LILLE géré pour certaines rue par la bd adresse
# Corse PORTO => OTA != PORTO VECCHIO, PORTICCIO => GROSSETO PRUGNA, SAGONE => VICO, non géré dans la bd adresse
# Mise en prod, doc : 0.5j
# Réunions : 0.25-0.5j
# Accuracy prévisions, normal(38) : +90%, dense(75) : +95%, campagne(05) sans lieux dits : +80%